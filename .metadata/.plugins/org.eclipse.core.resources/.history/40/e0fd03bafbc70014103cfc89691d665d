package DAO;

import java.util.Iterator;
import org.skife.jdbi.v2.sqlobject.Bind;
import org.skife.jdbi.v2.sqlobject.SqlQuery;
import org.skife.jdbi.v2.sqlobject.SqlUpdate;
import org.skife.jdbi.v2.sqlobject.customizers.RegisterMapperFactory;
import org.skife.jdbi.v2.tweak.BeanMapperFactory;

public interface PlayerDao {
	
	@SqlUpdate("CREATE TABLE IF NOT EXISTS commentaires (id INTEGER PRIMARY KEY, id_video INTEGER, id_utilisateur INTEGER, commentaire TEXT, date TEXT, heure TEXT, FOREIGN KEY(id_video) REFERENCES videos(id), FOREIGN KEY(id_utilisateur) REFERENCES users(id))")
	public void createTable();
	
	@SqlUpdate("INSERT INTO commentaires (id_video,id_utilisateur,commentaire,date,heure) VALUES (:id_video,:id_utilisateur,:commentaire,:date,:heure)")
	public void insertCommentaire(@Bind("id_video") int id_video, @Bind("id_utilisateur") int id_utilisateur, @Bind("commentaire") String commentaire, @Bind("date") String date, @Bind("heure") String heure);

	@SqlQuery("SELECT * FROM commentaires where id=:id")
	@RegisterMapperFactory(BeanMapperFactory.class)
	public Commentaire getCommentaire(@Bind("id") int id);
	
	@SqlQuery("SELECT * FROM commentaires where id_video=:id_video")
	@RegisterMapperFactory(BeanMapperFactory.class)
	public Commentaire getCommentaireByVideo(@Bind("id_video") int id_video);
	
	@SqlQuery("SELECT * FROM commentaires where id_utilisateur=:id_utilisateur")
	@RegisterMapperFactory(BeanMapperFactory.class)
	public Commentaire getCommentaireByUser(@Bind("id_utilisateur") int id_utilisateur);
	
	@SqlQuery("SELECT * FROM commentaires")
	@RegisterMapperFactory(BeanMapperFactory.class)
	public Iterator<Commentaire> getAllCommentaire();
	
	@SqlQuery("SELECT * FROM commentaires ORDER BY date DESC, heure DESC")
	@RegisterMapperFactory(BeanMapperFactory.class)
	public Iterator<Commentaire> getAllCommentaireDesc();
	
	@SqlQuery("SELECT * FROM commentaires where id_video=:id_video ORDER BY date DESC, heure DESC LIMIT :limit")
	@RegisterMapperFactory(BeanMapperFactory.class)
	public Iterator<Commentaire> getAllCommentaireDescLimit(@Bind("id_video") int id_video, @Bind("limit") int limit);
	
	@SqlUpdate("DROP TABLE IF EXISTS commentaires")
	public void dropTable();
	
	@SqlUpdate("DELETE FROM commentaires where id=:id")
	public void deleteCommentaire(@Bind("id") int id);
}